{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","React","memo","posts","selectedPostId","selectPost","className","map","post","userId","body","id","type","onClick","request","url","method","fetch","then","responce","json","NewCommentForm","createComment","postId","useState","inputName","setInputName","inputEmail","setInputEmail","inputBody","setInputBody","handleChange","event","target","name","value","onSubmit","preventDefault","email","placeholder","onChange","PostDetails","details","setDetails","comments","setComments","showComments","setShowComments","loadBody","getPostDetails","loadComments","getPostComments","removeComment","commentId","filter","comment","deleteComment","useCallback","newComment","commentToList","Date","now","valueOf","currentComments","headers","JSON","stringify","useEffect","Promise","all","length","App","setPosts","setSelectedPostId","selectedUserId","setSelectedUserId","users","setUsers","loadPosts","getUserPosts","loadUsers","loadedUsers","Number","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f12955a8.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  selectedPostId: number,\n  selectPost: (postId: number) => void\n}\n\nexport const PostsList: React.FC<Props> = React.memo(\n  ({ posts, selectedPostId, selectPost }) => {\n    return (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {\n            posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>\n                    {`[User #${post.userId}]: `}\n                  </b>\n                  {post.body}\n                </div>\n                {\n                  selectedPostId === post.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => selectPost(0)}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => selectPost(post.id)}\n                      >\n                        Open\n                      </button>\n                    )\n                }\n\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    );\n  },\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, method?: RequestInit) => {\n  return fetch(`${BASE_URL}${url}`, method).then(responce => responce.json());\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { FetchComment } from '../../types/Comment';\n\ninterface Props {\n  createComment: (newComment: FetchComment) => void,\n  postId: number\n}\n\nexport const NewCommentForm: React.FC<Props> = React.memo(\n  ({ createComment, postId }) => {\n    const [inputName, setInputName] = useState('');\n    const [inputEmail, setInputEmail] = useState('');\n    const [inputBody, setInputBody] = useState('');\n\n    const handleChange\n    = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const { name, value } = event.target;\n\n      switch (name) {\n        case 'name':\n          setInputName(value);\n          break;\n        case 'email':\n          setInputEmail(value);\n          break;\n        case 'body':\n          setInputBody(value);\n          break;\n        default:\n          break;\n      }\n    };\n\n    const clear = () => {\n      setInputBody('');\n      setInputEmail('');\n      setInputName('');\n    };\n\n    const commentSumbit = (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      createComment({\n        postId,\n        name: inputName,\n        email: inputEmail,\n        body: inputBody,\n      });\n      clear();\n    };\n\n    return (\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={commentSumbit}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            value={inputName}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            value={inputEmail}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={inputBody}\n            onChange={handleChange}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n    );\n  },\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment, FetchComment } from '../../types/Comment';\nimport './PostDetails.scss';\nimport { NewCommentForm } from '../NewCommentForm';\n\ninterface Props {\n  selectedPostId: number\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPostId }) => {\n  const [details, setDetails] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(true);\n\n  const loadBody = (postId: number) => {\n    getPostDetails(postId)\n      .then(setDetails);\n  };\n\n  const loadComments = (postId: number) => {\n    getPostComments(postId)\n      .then(setComments);\n  };\n\n  const removeComment = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n    deleteComment(commentId);\n  };\n\n  const createComment = useCallback((newComment: FetchComment) => {\n    const commentToList = {\n      ...newComment,\n      id: Date.now().valueOf(),\n    };\n\n    setComments(currentComments => [...currentComments, commentToList]);\n    addComment(newComment);\n  }, [comments]);\n\n  useEffect(() => {\n    Promise.all([loadBody(selectedPostId), loadComments(selectedPostId)]);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {details?.body}\n        </p>\n      </section>\n\n      {\n        comments.length > 0\n        && (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              {\n                showComments\n                  ? `Hide ${comments.length} comment${comments.length !== 1 ? 's' : ''}`\n                  : `Show ${comments.length} comment${comments.length !== 1 ? 's' : ''}`\n              }\n            </button>\n\n            {\n              showComments\n                && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        key={comment.id}\n                        className=\"PostDetails__list-item\"\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove--button button\"\n                          onClick={() => removeComment(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )\n            }\n          </section>\n        )\n      }\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            createComment={createComment}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { request } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  const url = userId === 0\n    ? '/posts'\n    : `/posts?userId=${userId}`;\n\n  return request(url);\n};\n\nexport const getPostDetails = (postId: number) => (\n  request(`/posts/${postId}`)\n);\n","import { request } from './api';\nimport { FetchComment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => (\n  request(`/comments?postId=${postId}`)\n);\n\nexport const deleteComment = (commentId: number) => (\n  request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  }));\n\nexport const addComment = (comment: FetchComment) => (\n  request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  })\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\n\nexport const App: React.FC = React.memo(() => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const loadPosts = (userId: number) => {\n    getUserPosts(userId).then(setPosts);\n  };\n\n  const loadUsers = () => {\n    getUsers().then(loadedUsers => setUsers(loadedUsers));\n  };\n\n  useEffect(() => {\n    Promise.all([loadPosts(selectedUserId), loadUsers()]);\n  }, [selectedUserId]);\n\n  const selectPost = useCallback(\n    (postId: number) => {\n      setSelectedPostId(postId);\n    },\n    [],\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(Number(event.target.value))}\n          >\n            <option\n              value=\"0\"\n              key={0}\n            >\n              All users\n            </option>\n            {\n              users.map(user => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))\n            }\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            selectPost={selectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n});\n","import { request } from './api';\n\nexport const getUsers = () => (request('/users'));\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}